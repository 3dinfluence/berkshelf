{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Berkshelf","tagline":"Manage a Cookbook's, or an Application's, Cookbook dependencies","body":"# Berkshelf\r\n\r\nManages a Cookbook's, or an Application's, Cookbook dependencies\r\n\r\n## Install\r\n\r\n    $ gem install berkshelf\r\n\r\n## Getting Started\r\n\r\n### Berksfile\r\n\r\nDependencies are managed via a `Berksfile` in the directory where you want the cookbooks to be installed.  The Berksfile, like Bundler's Gemfile, contains which cookbooks are needed and, optionally, where to find them:\r\n\r\n    cookbook 'memcached'\r\n    cookbook 'nginx'\r\n    cookbook 'my_app', path: '/path/to/cookbook'\r\n    cookbook 'mysql', git: 'git://github.com/opscode-cookbooks/mysql.git'\r\n\r\nOnce you have a Berksfile run the install command and the Cookbooks and their dependencies, recurisively, will be installed to a central location on your local disk called a `Berkshelf`. The Berkshelf is by default located at `~/.berkshelf`.\r\n\r\n    $ knife berks install\r\n\r\n## CLI Commands\r\n\r\n### knife berks install\r\n\r\nInstall the Cookbooks defined by sources in your Berksfile and their dependencies, recursively, to your Berkshelf.\r\n\r\n    $ knife berks install\r\n\r\nA Berksfile.lock will be generated if one does not already exist that will contain the dependency solution.\r\n\r\nIf a Berksfile.lock is present when the install command is run, the locked sources in the Lockfile will take precedence over any sources defined in the Berksfile.\r\n\r\n### knife berks update\r\n\r\nThis will still perform an install on your Berksfile, but it will skip a Lockfile if it is present and install fresh\r\n\r\n    $ knife berks update\r\n\r\n### knife berks init\r\n\r\nPrepares a local path to have it's Cookbook dependencies managed by Berkshelf. If the target path is a Cookbook itself, additional Berkshelf support files will be generated to get you started.\r\n\r\n    $ knife berks init nginx-cookbook\r\n\r\n## Berkshelf with Vagrant\r\n\r\nBecause Berkshelf stores your Cookbooks in a central location and can store multiple versions of the same Cookbook, we need a way to present these Cookbooks in a structure that is familiar to other tools that expect your Cookbooks to be located all in the same directory and have their folder names the same as the Cookbook name.\r\n\r\n### Shims\r\n\r\nEnter shims\r\n\r\n    a shim (from shim) or shiv is a small library that transparently intercepts an API and changes the parameters\r\n    passed, handles the operation itself, or redirects the operation elsewhere.\r\n\r\nBerkshelf handles shims by hard linking Cookbooks from your Berkshelf to a directory named `cookbooks` in your current working directory. You can install shims by adding the `--shims` flag to the install command.\r\n\r\n    $ knife berks install --shims\r\n\r\nIf we had a Berksfile that had a source for\r\n\r\n    cookbook \"nginx\", \"= 0.100.5\"\r\n\r\nThis would install your Cookbook to `~/.berkshelf/nginx-0.100.5` and also create a shim at `cookbooks/nginx`.\r\n\r\nIn your Vagrant file you should add this shims directory to the `cookbooks_path`\r\n\r\n    config.vm.provision :chef_solo do |chef|\r\n      chef.cookbooks_path = [ \"cookbooks\" ]\r\n    end\r\n\r\n## The Berksfile\r\n\r\nCookbooks are defined as dependencies by declaring them in the `Berksfile`\r\n\r\n    cookbook 'nginx'\r\n\r\nCookbooks without additional options are assumed to come from the Opscode Community site at the latest available version: http://community.opscode.com/cookbooks\r\n\r\nOptions available include:\r\n\r\nversion constraint\r\n\r\n    cookbook \"nginx\", \"= 0.101.2\"    # precisely 0.101.2\r\n    cookbook \"mysql\", \"< 1.2.4\"      # less than and not including 1.2.4\r\n    cookbook \"openssl\", \"~> 1.0.0\"   # greater than 1.0.0, and up to but not including 1.1.0\r\n\r\ngit\r\n\r\n    # ref can be a branch name, tag, or commit hash. If ref is not provided, HEAD is used.\r\n    cookbook \"mysql\", git: \"https://github.com/opscode-cookbooks/mysql.git\", ref: \"<any git ref>\" \r\n\r\npath\r\n\r\n    # knife berks will look in /path/to/location/of/my_application for the cookbook\r\n    cookbook \"my_application\", path: \"/path/to/location/of\"\r\n\r\n### Groups\r\n\r\nGroups can be defined via blocks or inline as an option:\r\n\r\n    group :solo do\r\n      cookbook 'base'\r\n    end\r\n    \r\n    cookbook 'base', :group => 'solo'\r\n\r\nWhen using install or update, groups can be excluded with the --without GROUP_NAME or -W GROUP_NAME flags.\r\n\r\n# Contributing\r\n\r\n## Running tests\r\n\r\n### Install prerequisites\r\n\r\nInstall the latest version of {Bundler}[http://gembundler.com]\r\n\r\n    $ gem install bundler\r\n\r\nClone the project\r\n\r\n    $ git clone git://github.com/RiotGames/berkshelf.git\r\n\r\nand run:\r\n\r\n    $ cd berkshelf\r\n    $ bundle install\r\n\r\nBundler will install all gems and their dependencies required for testing and developing. \r\n\r\n### Running unit (RSpec) and acceptance (Cucumber) tests\r\n\r\n    $ bundle exec guard start\r\n\r\n# Authors and Contributors\r\n\r\n* Josiah Kiehl (<josiah@skirmisher.net>)\r\n* Jamie Winsor (<jamie@vialstudios.com>)\r\n* Erik Hollensbe (<erik@hollensbe.org>)\r\n* Michael Ivey (<ivey@gweezlebur.com>)\r\n"}